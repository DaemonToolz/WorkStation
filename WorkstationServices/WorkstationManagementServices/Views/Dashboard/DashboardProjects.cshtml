@using WorkstationManagementServices.Models.Database
@model List<WorkstationManagementServices.Models.DashboardItem>


<br/>
<p>
    @Html.ActionLink(" ", "Dashboard", "Home", null, new {@class="btn btn-default glyphicon glyphicon-arrow-left"})
</p>

<div class="col-md-12">
    <h2> All Activities </h2>
    <hr />
    <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
    
</div>

<div class="col-md-12">
    <h3> Folders </h3>
    <hr/>
    @if (ViewData["Folders"] != null) {
      

        if (ViewData["Root"] != null)
        {
            <a href="@Url.Action("DashboardProjects", "DashBoard", new {parent = "/", projectid = (int) ViewData["Project"]})" class="btn btn-default">
                <span class="glyphicon glyphicon-chevron-up"></span> 
                <label>Root</label>
            </a>
            <br />
            <a href="@Url.Action("DashboardProjects", "DashBoard", new {parent = ViewData["Root"].ToString(), projectid = (int) ViewData["Project"]})" class="btn btn-default">
                <span class="glyphicon glyphicon-chevron-left"></span>
                <label>Previous</label>
            </a>
            <br/>
        }
        foreach (var parent in ViewData["Folders"] as List<String>) {
            
            var name = parent.Remove(parent.LastIndexOf("/"), 1);
            name = name.Remove(0, name.LastIndexOf("/")).Remove(0,1);
             

            <a href="@Url.Action("DashboardProjects", "DashBoard", new {parent = parent, projectid = (int) ViewData["Project"]})" class="btn btn-default">
                <span class="glyphicon glyphicon-chevron-right"></span>
                <label>@name</label>
            </a>
        }
    }
</div>

<div class="col-md-12">
    <h3> Activity per File </h3>
    <hr/>
   
        @{var i = 0;}
        @foreach (var item in Model){
            <div class="col-md-12 col-xs-12 col-lg-12" style="margin-top:25px">
                <div class="col-md-12 col-xs-12 col-lg-12">
                    @item.Name
                    <button type="button" data-toggle="collapse" class="pull-right btn btn-default btn-circle" data-target="#dcollapse@(i)">
                        <span class="glyphicon glyphicon-arrow-down">  </span> 
                    </button>
                    <hr/>
                </div>
                
                <!-- Check if contains either comments or changes-->
                <div class="col-md-12 col-xs-12 col-lg-12 collapse" id="dcollapse@(i++)">
                    <!-- Check if contains comment activities -->
                    <div class="col-md-6 col-xs-12 col-lg-6 ">
                        <div id="c_@item.Absolute"></div>
                    </div>
                    <!-- Check if contains changeset Activities-->
                    <div class="col-md-6 col-xs-12 col-lg-6 ">
                        <div id="a_@item.Absolute"></div>
                    </div>
                </div>
            </div>

        }
    
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    
    <script>
        /*
            TODO
            - Update & Improve general UI
            - SignalR Integration
            - AJAX integration for the UI
        */

        var lineChanges = [];
        var newContents = [];
        var remContents = [];
        var files = [];

        var xAxis = [];
        var yAxis = [];

        @{
            var data = new Dictionary<string, Dictionary<string, int>>();
        }

        @foreach (var item in Model){
            var commentDate = new Dictionary<string, int>();
            int totalChanges = 0, totalAdds = 0, totalDel = 0;
            foreach (var sub in item.Changes)
            {
                totalChanges += Math.Abs(sub.edition);
                totalAdds += Math.Abs(sub.addition);
                totalDel += Math.Abs(sub.deletion);
               
                if (!commentDate.ContainsKey(sub.stamp.ToShortDateString())){
                    commentDate.Add(sub.stamp.ToShortDateString(), 0);
                }

                commentDate[sub.stamp.ToShortDateString()]++;
            }

            @:lineChanges.push(@totalChanges);
            @:newContents.push(@totalAdds);
            @:remContents.push(@totalDel);
            @:files.push("@item.Name");

            data.Add($"a_{item.Absolute}", commentDate);

            commentDate = new Dictionary<string, int>();
            foreach (var sub in item.Comments){
                if (!commentDate.ContainsKey(sub.Date)) {
                    commentDate.Add(sub.Date, 0);
                }
                commentDate[sub.Date]++;
            }
            data.Add($"c_{item.Absolute}", commentDate);




        }

        Highcharts.chart('container',
            {
                chart: { type: 'column' },
                title: { text: 'Total changes on this project' },
                xAxis: { categories: files },
                credits: { enabled: false },
                series: [
                    { name: 'Line Edit', data: lineChanges, color: 'yellow' },
                    { name: 'New Content', data: newContents, color: 'green' },
                    { name: 'Removed Content', data: remContents, color: 'red' }
                ]
            });

        @foreach (var content in data){
            <text>
            xAxis.length = 0;
            yAxis.length = 0;

            @foreach (var subContent in content.Value){
                 @:xAxis.push("@subContent.Key");
                 @:yAxis.push(@subContent.Value);
            }

            var text = "Activity";

            @if (content.Key.StartsWith("c_")){
                @:text = "Comment";

            }


                Highcharts.chart("@content.Key", {
                    title: { text: text },
                yAxis: {
                        tickInterval: 1,
                    //minRange: 1,
                    allowDecimals: false,
                    title: { text: 'Count' }
                    },
                xAxis: { categories: xAxis },

                plotOptions: { line: { dataLabels: { enabled: true }, enableMouseTracking: false } },
                series: [ {
                        name: 'Comment count',
                    data: yAxis
                }]
            });


            </text>
        }



    </script>
}