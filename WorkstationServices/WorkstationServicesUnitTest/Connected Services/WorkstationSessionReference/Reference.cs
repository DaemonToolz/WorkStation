//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkstationServicesUnitTest.WorkstationSessionReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputValidationFaultContract", Namespace="http://schemas.datacontract.org/2004/07/WorkstationServices.Security")]
    [System.SerializableAttribute()]
    public partial class InputValidationFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkstationSessionReference.ISession", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISession {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/LogIn", ReplyAction="http://tempuri.org/ISession/LogInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WorkstationServicesUnitTest.WorkstationSessionReference.InputValidationFaultContract), Action="http://tempuri.org/ISession/LogInInputValidationFaultContractFault", Name="InputValidationFaultContract", Namespace="http://schemas.datacontract.org/2004/07/WorkstationServices.Security")]
        Workstation.Model.UsersModel LogIn(string Username, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/LogIn", ReplyAction="http://tempuri.org/ISession/LogInResponse")]
        System.Threading.Tasks.Task<Workstation.Model.UsersModel> LogInAsync(string Username, string Token);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ISession/LogOut")]
        void LogOut(Workstation.Model.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ISession/LogOut")]
        System.Threading.Tasks.Task LogOutAsync(Workstation.Model.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllProjects", ReplyAction="http://tempuri.org/ISession/GetAllProjectsResponse")]
        Workstation.Model.ProjectModel[] GetAllProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllProjects", ReplyAction="http://tempuri.org/ISession/GetAllProjectsResponse")]
        System.Threading.Tasks.Task<Workstation.Model.ProjectModel[]> GetAllProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllUsers", ReplyAction="http://tempuri.org/ISession/GetAllUsersResponse")]
        Workstation.Model.UsersModel[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllUsers", ReplyAction="http://tempuri.org/ISession/GetAllUsersResponse")]
        System.Threading.Tasks.Task<Workstation.Model.UsersModel[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllDepartments", ReplyAction="http://tempuri.org/ISession/GetAllDepartmentsResponse")]
        WorkstationMessaging.Model.DepartmentModel[] GetAllDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllDepartments", ReplyAction="http://tempuri.org/ISession/GetAllDepartmentsResponse")]
        System.Threading.Tasks.Task<WorkstationMessaging.Model.DepartmentModel[]> GetAllDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTeams", ReplyAction="http://tempuri.org/ISession/GetAllTeamsResponse")]
        WorkstationMessaging.Model.TeamModel[] GetAllTeams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTeams", ReplyAction="http://tempuri.org/ISession/GetAllTeamsResponse")]
        System.Threading.Tasks.Task<WorkstationMessaging.Model.TeamModel[]> GetAllTeamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerUser", ReplyAction="http://tempuri.org/ISession/GetTeamPerUserResponse")]
        WorkstationMessaging.Model.TeamModel GetTeamPerUser(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerUser", ReplyAction="http://tempuri.org/ISession/GetTeamPerUserResponse")]
        System.Threading.Tasks.Task<WorkstationMessaging.Model.TeamModel> GetTeamPerUserAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerId", ReplyAction="http://tempuri.org/ISession/GetTeamPerIdResponse")]
        WorkstationMessaging.Model.TeamModel GetTeamPerId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerId", ReplyAction="http://tempuri.org/ISession/GetTeamPerIdResponse")]
        System.Threading.Tasks.Task<WorkstationMessaging.Model.TeamModel> GetTeamPerIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionChannel : WorkstationServicesUnitTest.WorkstationSessionReference.ISession, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionClient : System.ServiceModel.ClientBase<WorkstationServicesUnitTest.WorkstationSessionReference.ISession>, WorkstationServicesUnitTest.WorkstationSessionReference.ISession {
        
        public SessionClient() {
        }
        
        public SessionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Workstation.Model.UsersModel LogIn(string Username, string Token) {
            return base.Channel.LogIn(Username, Token);
        }
        
        public System.Threading.Tasks.Task<Workstation.Model.UsersModel> LogInAsync(string Username, string Token) {
            return base.Channel.LogInAsync(Username, Token);
        }
        
        public void LogOut(Workstation.Model.UsersModel user) {
            base.Channel.LogOut(user);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(Workstation.Model.UsersModel user) {
            return base.Channel.LogOutAsync(user);
        }
        
        public Workstation.Model.ProjectModel[] GetAllProjects() {
            return base.Channel.GetAllProjects();
        }
        
        public System.Threading.Tasks.Task<Workstation.Model.ProjectModel[]> GetAllProjectsAsync() {
            return base.Channel.GetAllProjectsAsync();
        }
        
        public Workstation.Model.UsersModel[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<Workstation.Model.UsersModel[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public WorkstationMessaging.Model.DepartmentModel[] GetAllDepartments() {
            return base.Channel.GetAllDepartments();
        }
        
        public System.Threading.Tasks.Task<WorkstationMessaging.Model.DepartmentModel[]> GetAllDepartmentsAsync() {
            return base.Channel.GetAllDepartmentsAsync();
        }
        
        public WorkstationMessaging.Model.TeamModel[] GetAllTeams() {
            return base.Channel.GetAllTeams();
        }
        
        public System.Threading.Tasks.Task<WorkstationMessaging.Model.TeamModel[]> GetAllTeamsAsync() {
            return base.Channel.GetAllTeamsAsync();
        }
        
        public WorkstationMessaging.Model.TeamModel GetTeamPerUser(int userid) {
            return base.Channel.GetTeamPerUser(userid);
        }
        
        public System.Threading.Tasks.Task<WorkstationMessaging.Model.TeamModel> GetTeamPerUserAsync(int userid) {
            return base.Channel.GetTeamPerUserAsync(userid);
        }
        
        public WorkstationMessaging.Model.TeamModel GetTeamPerId(int id) {
            return base.Channel.GetTeamPerId(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationMessaging.Model.TeamModel> GetTeamPerIdAsync(int id) {
            return base.Channel.GetTeamPerIdAsync(id);
        }
    }
}
