//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkstationBrowser.SessionReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenericModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WorkstationBrowser.SessionReference.ProjectModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WorkstationBrowser.SessionReference.TaskModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WorkstationBrowser.SessionReference.TeamModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WorkstationBrowser.SessionReference.UsersModel))]
    public partial class GenericModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectModel", Namespace="http://schemas.datacontract.org/2004/07/Workstation.Model")]
    [System.SerializableAttribute()]
    public partial class ProjectModel : WorkstationBrowser.SessionReference.GenericModel {
        
        private System.Nullable<int> admin_idField;
        
        private string nameField;
        
        private short precedenceField;
        
        private string projpicField;
        
        private string rootField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> admin_id {
            get {
                return this.admin_idField;
            }
            set {
                if ((this.admin_idField.Equals(value) != true)) {
                    this.admin_idField = value;
                    this.RaisePropertyChanged("admin_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short precedence {
            get {
                return this.precedenceField;
            }
            set {
                if ((this.precedenceField.Equals(value) != true)) {
                    this.precedenceField = value;
                    this.RaisePropertyChanged("precedence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string projpic {
            get {
                return this.projpicField;
            }
            set {
                if ((object.ReferenceEquals(this.projpicField, value) != true)) {
                    this.projpicField = value;
                    this.RaisePropertyChanged("projpic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string root {
            get {
                return this.rootField;
            }
            set {
                if ((object.ReferenceEquals(this.rootField, value) != true)) {
                    this.rootField = value;
                    this.RaisePropertyChanged("root");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class TaskModel : WorkstationBrowser.SessionReference.GenericModel {
        
        private System.DateTime beginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> endField;
        
        private short precedenceField;
        
        private short progressField;
        
        private long project_idField;
        
        private string titleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> user_idField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime begin {
            get {
                return this.beginField;
            }
            set {
                if ((this.beginField.Equals(value) != true)) {
                    this.beginField = value;
                    this.RaisePropertyChanged("begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> end {
            get {
                return this.endField;
            }
            set {
                if ((this.endField.Equals(value) != true)) {
                    this.endField = value;
                    this.RaisePropertyChanged("end");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short precedence {
            get {
                return this.precedenceField;
            }
            set {
                if ((this.precedenceField.Equals(value) != true)) {
                    this.precedenceField = value;
                    this.RaisePropertyChanged("precedence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short progress {
            get {
                return this.progressField;
            }
            set {
                if ((this.progressField.Equals(value) != true)) {
                    this.progressField = value;
                    this.RaisePropertyChanged("progress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long project_id {
            get {
                return this.project_idField;
            }
            set {
                if ((this.project_idField.Equals(value) != true)) {
                    this.project_idField = value;
                    this.RaisePropertyChanged("project_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> user_id {
            get {
                return this.user_idField;
            }
            set {
                if ((this.user_idField.Equals(value) != true)) {
                    this.user_idField = value;
                    this.RaisePropertyChanged("user_id");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class TeamModel : WorkstationBrowser.SessionReference.GenericModel {
        
        private System.Nullable<int> department_idField;
        
        private System.Nullable<int> manager_idField;
        
        private string nameField;
        
        private System.Nullable<long> project_idField;
        
        private string teampicField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> department_id {
            get {
                return this.department_idField;
            }
            set {
                if ((this.department_idField.Equals(value) != true)) {
                    this.department_idField = value;
                    this.RaisePropertyChanged("department_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> manager_id {
            get {
                return this.manager_idField;
            }
            set {
                if ((this.manager_idField.Equals(value) != true)) {
                    this.manager_idField = value;
                    this.RaisePropertyChanged("manager_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<long> project_id {
            get {
                return this.project_idField;
            }
            set {
                if ((this.project_idField.Equals(value) != true)) {
                    this.project_idField = value;
                    this.RaisePropertyChanged("project_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string teampic {
            get {
                return this.teampicField;
            }
            set {
                if ((object.ReferenceEquals(this.teampicField, value) != true)) {
                    this.teampicField = value;
                    this.RaisePropertyChanged("teampic");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsersModel", Namespace="http://schemas.datacontract.org/2004/07/Workstation.Model")]
    [System.SerializableAttribute()]
    public partial class UsersModel : WorkstationBrowser.SessionReference.GenericModel {
        
        private string emailField;
        
        private string profilepicField;
        
        private string rankField;
        
        private string rightsField;
        
        private System.Nullable<int> team_idField;
        
        private string usernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string profilepic {
            get {
                return this.profilepicField;
            }
            set {
                if ((object.ReferenceEquals(this.profilepicField, value) != true)) {
                    this.profilepicField = value;
                    this.RaisePropertyChanged("profilepic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string rank {
            get {
                return this.rankField;
            }
            set {
                if ((object.ReferenceEquals(this.rankField, value) != true)) {
                    this.rankField = value;
                    this.RaisePropertyChanged("rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string rights {
            get {
                return this.rightsField;
            }
            set {
                if ((object.ReferenceEquals(this.rightsField, value) != true)) {
                    this.rightsField = value;
                    this.RaisePropertyChanged("rights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> team_id {
            get {
                return this.team_idField;
            }
            set {
                if ((this.team_idField.Equals(value) != true)) {
                    this.team_idField = value;
                    this.RaisePropertyChanged("team_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputValidationFaultContract", Namespace="http://schemas.datacontract.org/2004/07/WorkstationServices.Security")]
    [System.SerializableAttribute()]
    public partial class InputValidationFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepartmentModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class DepartmentModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int idField;
        
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RankModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class RankModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string nameField;
        
        private string rightsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string rights {
            get {
                return this.rightsField;
            }
            set {
                if ((object.ReferenceEquals(this.rightsField, value) != true)) {
                    this.rightsField = value;
                    this.RaisePropertyChanged("rights");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class NotificationModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string contentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long idField;
        
        private bool readField;
        
        private System.DateTime stampField;
        
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool read {
            get {
                return this.readField;
            }
            set {
                if ((this.readField.Equals(value) != true)) {
                    this.readField = value;
                    this.RaisePropertyChanged("read");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime stamp {
            get {
                return this.stampField;
            }
            set {
                if ((this.stampField.Equals(value) != true)) {
                    this.stampField = value;
                    this.RaisePropertyChanged("stamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class MessageModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string contentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool directField;
        
        private int fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool readField;
        
        private System.DateTime stampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        private int toField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool direct {
            get {
                return this.directField;
            }
            set {
                if ((this.directField.Equals(value) != true)) {
                    this.directField = value;
                    this.RaisePropertyChanged("direct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int from {
            get {
                return this.fromField;
            }
            set {
                if ((this.fromField.Equals(value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool read {
            get {
                return this.readField;
            }
            set {
                if ((this.readField.Equals(value) != true)) {
                    this.readField = value;
                    this.RaisePropertyChanged("read");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime stamp {
            get {
                return this.stampField;
            }
            set {
                if ((this.stampField.Equals(value) != true)) {
                    this.stampField = value;
                    this.RaisePropertyChanged("stamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int to {
            get {
                return this.toField;
            }
            set {
                if ((this.toField.Equals(value) != true)) {
                    this.toField = value;
                    this.RaisePropertyChanged("to");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class FileModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int change_countField;
        
        private System.DateTime creation_dateField;
        
        private System.DateTime last_updateField;
        
        private int last_updaterField;
        
        private string nameField;
        
        private int owner_idField;
        
        private long project_idField;
        
        private string tracker_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int change_count {
            get {
                return this.change_countField;
            }
            set {
                if ((this.change_countField.Equals(value) != true)) {
                    this.change_countField = value;
                    this.RaisePropertyChanged("change_count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime creation_date {
            get {
                return this.creation_dateField;
            }
            set {
                if ((this.creation_dateField.Equals(value) != true)) {
                    this.creation_dateField = value;
                    this.RaisePropertyChanged("creation_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime last_update {
            get {
                return this.last_updateField;
            }
            set {
                if ((this.last_updateField.Equals(value) != true)) {
                    this.last_updateField = value;
                    this.RaisePropertyChanged("last_update");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int last_updater {
            get {
                return this.last_updaterField;
            }
            set {
                if ((this.last_updaterField.Equals(value) != true)) {
                    this.last_updaterField = value;
                    this.RaisePropertyChanged("last_updater");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int owner_id {
            get {
                return this.owner_idField;
            }
            set {
                if ((this.owner_idField.Equals(value) != true)) {
                    this.owner_idField = value;
                    this.RaisePropertyChanged("owner_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long project_id {
            get {
                return this.project_idField;
            }
            set {
                if ((this.project_idField.Equals(value) != true)) {
                    this.project_idField = value;
                    this.RaisePropertyChanged("project_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string tracker_id {
            get {
                return this.tracker_idField;
            }
            set {
                if ((object.ReferenceEquals(this.tracker_idField, value) != true)) {
                    this.tracker_idField = value;
                    this.RaisePropertyChanged("tracker_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChangeSetModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class ChangeSetModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int additionField;
        
        private int deletionField;
        
        private string descriptionField;
        
        private int editionField;
        
        private System.Guid idField;
        
        private System.Nullable<System.Guid> parentField;
        
        private string shortNameField;
        
        private string trackerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int addition {
            get {
                return this.additionField;
            }
            set {
                if ((this.additionField.Equals(value) != true)) {
                    this.additionField = value;
                    this.RaisePropertyChanged("addition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int deletion {
            get {
                return this.deletionField;
            }
            set {
                if ((this.deletionField.Equals(value) != true)) {
                    this.deletionField = value;
                    this.RaisePropertyChanged("deletion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int edition {
            get {
                return this.editionField;
            }
            set {
                if ((this.editionField.Equals(value) != true)) {
                    this.editionField = value;
                    this.RaisePropertyChanged("edition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.Guid> parent {
            get {
                return this.parentField;
            }
            set {
                if ((this.parentField.Equals(value) != true)) {
                    this.parentField = value;
                    this.RaisePropertyChanged("parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string shortName {
            get {
                return this.shortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.shortNameField, value) != true)) {
                    this.shortNameField = value;
                    this.RaisePropertyChanged("shortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string trackerId {
            get {
                return this.trackerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.trackerIdField, value) != true)) {
                    this.trackerIdField = value;
                    this.RaisePropertyChanged("trackerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SessionReference.ISession", CallbackContract=typeof(WorkstationBrowser.SessionReference.ISessionCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISession {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/LogIn", ReplyAction="http://tempuri.org/ISession/LogInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WorkstationBrowser.SessionReference.InputValidationFaultContract), Action="http://tempuri.org/ISession/LogInInputValidationFaultContractFault", Name="InputValidationFaultContract", Namespace="http://schemas.datacontract.org/2004/07/WorkstationServices.Security")]
        WorkstationBrowser.SessionReference.UsersModel LogIn(string Username, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/LogIn", ReplyAction="http://tempuri.org/ISession/LogInResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> LogInAsync(string Username, string Token);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ISession/LogOut")]
        void LogOut(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ISession/LogOut")]
        System.Threading.Tasks.Task LogOutAsync(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllProjects", ReplyAction="http://tempuri.org/ISession/GetAllProjectsResponse")]
        WorkstationBrowser.SessionReference.ProjectModel[] GetAllProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllProjects", ReplyAction="http://tempuri.org/ISession/GetAllProjectsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel[]> GetAllProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetProject", ReplyAction="http://tempuri.org/ISession/GetProjectResponse")]
        WorkstationBrowser.SessionReference.ProjectModel GetProject(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetProject", ReplyAction="http://tempuri.org/ISession/GetProjectResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel> GetProjectAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditProject", ReplyAction="http://tempuri.org/ISession/EditProjectResponse")]
        bool EditProject(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditProject", ReplyAction="http://tempuri.org/ISession/EditProjectResponse")]
        System.Threading.Tasks.Task<bool> EditProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteProject", ReplyAction="http://tempuri.org/ISession/DeleteProjectResponse")]
        bool DeleteProject(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteProject", ReplyAction="http://tempuri.org/ISession/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateProject", ReplyAction="http://tempuri.org/ISession/CreateProjectResponse")]
        WorkstationBrowser.SessionReference.ProjectModel CreateProject(WorkstationBrowser.SessionReference.ProjectModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateProject", ReplyAction="http://tempuri.org/ISession/CreateProjectResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel> CreateProjectAsync(WorkstationBrowser.SessionReference.ProjectModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllUsers", ReplyAction="http://tempuri.org/ISession/GetAllUsersResponse")]
        WorkstationBrowser.SessionReference.UsersModel[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllUsers", ReplyAction="http://tempuri.org/ISession/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditUser", ReplyAction="http://tempuri.org/ISession/EditUserResponse")]
        bool EditUser(WorkstationBrowser.SessionReference.UsersModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditUser", ReplyAction="http://tempuri.org/ISession/EditUserResponse")]
        System.Threading.Tasks.Task<bool> EditUserAsync(WorkstationBrowser.SessionReference.UsersModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteUser", ReplyAction="http://tempuri.org/ISession/DeleteUserResponse")]
        bool DeleteUser(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteUser", ReplyAction="http://tempuri.org/ISession/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetUserId", ReplyAction="http://tempuri.org/ISession/GetUserIdResponse")]
        WorkstationBrowser.SessionReference.UsersModel GetUserId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetUserId", ReplyAction="http://tempuri.org/ISession/GetUserIdResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> GetUserIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllDepartments", ReplyAction="http://tempuri.org/ISession/GetAllDepartmentsResponse")]
        WorkstationBrowser.SessionReference.DepartmentModel[] GetAllDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllDepartments", ReplyAction="http://tempuri.org/ISession/GetAllDepartmentsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.DepartmentModel[]> GetAllDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTeams", ReplyAction="http://tempuri.org/ISession/GetAllTeamsResponse")]
        WorkstationBrowser.SessionReference.TeamModel[] GetAllTeams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTeams", ReplyAction="http://tempuri.org/ISession/GetAllTeamsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel[]> GetAllTeamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerUser", ReplyAction="http://tempuri.org/ISession/GetTeamPerUserResponse")]
        WorkstationBrowser.SessionReference.TeamModel GetTeamPerUser(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerUser", ReplyAction="http://tempuri.org/ISession/GetTeamPerUserResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerUserAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerId", ReplyAction="http://tempuri.org/ISession/GetTeamPerIdResponse")]
        WorkstationBrowser.SessionReference.TeamModel GetTeamPerId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerId", ReplyAction="http://tempuri.org/ISession/GetTeamPerIdResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateTeam", ReplyAction="http://tempuri.org/ISession/CreateTeamResponse")]
        WorkstationBrowser.SessionReference.TeamModel CreateTeam(WorkstationBrowser.SessionReference.TeamModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateTeam", ReplyAction="http://tempuri.org/ISession/CreateTeamResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> CreateTeamAsync(WorkstationBrowser.SessionReference.TeamModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllRanks", ReplyAction="http://tempuri.org/ISession/GetAllRanksResponse")]
        WorkstationBrowser.SessionReference.RankModel[] GetAllRanks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllRanks", ReplyAction="http://tempuri.org/ISession/GetAllRanksResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel[]> GetAllRanksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetRankByName", ReplyAction="http://tempuri.org/ISession/GetRankByNameResponse")]
        WorkstationBrowser.SessionReference.RankModel GetRankByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetRankByName", ReplyAction="http://tempuri.org/ISession/GetRankByNameResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel> GetRankByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/AcknowledgeNotification", ReplyAction="http://tempuri.org/ISession/AcknowledgeNotificationResponse")]
        bool AcknowledgeNotification(WorkstationBrowser.SessionReference.NotificationModel original, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/AcknowledgeNotification", ReplyAction="http://tempuri.org/ISession/AcknowledgeNotificationResponse")]
        System.Threading.Tasks.Task<bool> AcknowledgeNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel original, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllNotifications", ReplyAction="http://tempuri.org/ISession/GetAllNotificationsResponse")]
        WorkstationBrowser.SessionReference.NotificationModel[] GetAllNotifications(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllNotifications", ReplyAction="http://tempuri.org/ISession/GetAllNotificationsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.NotificationModel[]> GetAllNotificationsAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/CreateNotification")]
        void CreateNotification(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/CreateNotification")]
        System.Threading.Tasks.Task CreateNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/UpdateNotifications")]
        void UpdateNotifications(int userid, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/UpdateNotifications")]
        System.Threading.Tasks.Task UpdateNotificationsAsync(int userid, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/UpdateDirectMessages")]
        void UpdateDirectMessages(int userid, int targetid, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/UpdateDirectMessages")]
        System.Threading.Tasks.Task UpdateDirectMessagesAsync(int userid, int targetid, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/DeleteNotification")]
        void DeleteNotification(long notificationid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/DeleteNotification")]
        System.Threading.Tasks.Task DeleteNotificationAsync(long notificationid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTasks", ReplyAction="http://tempuri.org/ISession/GetAllTasksResponse")]
        WorkstationBrowser.SessionReference.TaskModel[] GetAllTasks(System.Nullable<long> project_id, System.Nullable<int> user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTasks", ReplyAction="http://tempuri.org/ISession/GetAllTasksResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel[]> GetAllTasksAsync(System.Nullable<long> project_id, System.Nullable<int> user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTaskId", ReplyAction="http://tempuri.org/ISession/GetTaskIdResponse")]
        WorkstationBrowser.SessionReference.TaskModel GetTaskId(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTaskId", ReplyAction="http://tempuri.org/ISession/GetTaskIdResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel> GetTaskIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateTask", ReplyAction="http://tempuri.org/ISession/CreateTaskResponse")]
        WorkstationBrowser.SessionReference.TaskModel CreateTask(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateTask", ReplyAction="http://tempuri.org/ISession/CreateTaskResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel> CreateTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteTask", ReplyAction="http://tempuri.org/ISession/DeleteTaskResponse")]
        bool DeleteTask(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteTask", ReplyAction="http://tempuri.org/ISession/DeleteTaskResponse")]
        System.Threading.Tasks.Task<bool> DeleteTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditTask", ReplyAction="http://tempuri.org/ISession/EditTaskResponse")]
        bool EditTask(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditTask", ReplyAction="http://tempuri.org/ISession/EditTaskResponse")]
        System.Threading.Tasks.Task<bool> EditTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllMessages", ReplyAction="http://tempuri.org/ISession/GetAllMessagesResponse")]
        WorkstationBrowser.SessionReference.MessageModel[] GetAllMessages(WorkstationBrowser.SessionReference.UsersModel caller, bool sended, bool received, bool direct_only, bool indirect_only);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllMessages", ReplyAction="http://tempuri.org/ISession/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.MessageModel[]> GetAllMessagesAsync(WorkstationBrowser.SessionReference.UsersModel caller, bool sended, bool received, bool direct_only, bool indirect_only);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/SendMessage", ReplyAction="http://tempuri.org/ISession/SendMessageResponse")]
        bool SendMessage(WorkstationBrowser.SessionReference.MessageModel caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/SendMessage", ReplyAction="http://tempuri.org/ISession/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(WorkstationBrowser.SessionReference.MessageModel caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/MarkAsRead", ReplyAction="http://tempuri.org/ISession/MarkAsReadResponse")]
        bool MarkAsRead(WorkstationBrowser.SessionReference.MessageModel caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/MarkAsRead", ReplyAction="http://tempuri.org/ISession/MarkAsReadResponse")]
        System.Threading.Tasks.Task<bool> MarkAsReadAsync(WorkstationBrowser.SessionReference.MessageModel caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteMessage", ReplyAction="http://tempuri.org/ISession/DeleteMessageResponse")]
        bool DeleteMessage(WorkstationBrowser.SessionReference.MessageModel caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteMessage", ReplyAction="http://tempuri.org/ISession/DeleteMessageResponse")]
        System.Threading.Tasks.Task<bool> DeleteMessageAsync(WorkstationBrowser.SessionReference.MessageModel caller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditTeam", ReplyAction="http://tempuri.org/ISession/EditTeamResponse")]
        bool EditTeam(WorkstationBrowser.SessionReference.TeamModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditTeam", ReplyAction="http://tempuri.org/ISession/EditTeamResponse")]
        System.Threading.Tasks.Task<bool> EditTeamAsync(WorkstationBrowser.SessionReference.TeamModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteTeam", ReplyAction="http://tempuri.org/ISession/DeleteTeamResponse")]
        bool DeleteTeam(WorkstationBrowser.SessionReference.TeamModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteTeam", ReplyAction="http://tempuri.org/ISession/DeleteTeamResponse")]
        System.Threading.Tasks.Task<bool> DeleteTeamAsync(WorkstationBrowser.SessionReference.TeamModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateFile", ReplyAction="http://tempuri.org/ISession/CreateFileResponse")]
        WorkstationBrowser.SessionReference.FileModel CreateFile(WorkstationBrowser.SessionReference.FileModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateFile", ReplyAction="http://tempuri.org/ISession/CreateFileResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.FileModel> CreateFileAsync(WorkstationBrowser.SessionReference.FileModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/UpdateFile", ReplyAction="http://tempuri.org/ISession/UpdateFileResponse")]
        bool UpdateFile(WorkstationBrowser.SessionReference.FileModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/UpdateFile", ReplyAction="http://tempuri.org/ISession/UpdateFileResponse")]
        System.Threading.Tasks.Task<bool> UpdateFileAsync(WorkstationBrowser.SessionReference.FileModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteFile", ReplyAction="http://tempuri.org/ISession/DeleteFileResponse")]
        bool DeleteFile(string trackerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteFile", ReplyAction="http://tempuri.org/ISession/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string trackerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetFile", ReplyAction="http://tempuri.org/ISession/GetFileResponse")]
        WorkstationBrowser.SessionReference.FileModel GetFile(string trackerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetFile", ReplyAction="http://tempuri.org/ISession/GetFileResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.FileModel> GetFileAsync(string trackerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetFiles", ReplyAction="http://tempuri.org/ISession/GetFilesResponse")]
        WorkstationBrowser.SessionReference.FileModel[] GetFiles(long projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetFiles", ReplyAction="http://tempuri.org/ISession/GetFilesResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.FileModel[]> GetFilesAsync(long projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateChangeSet", ReplyAction="http://tempuri.org/ISession/CreateChangeSetResponse")]
        WorkstationBrowser.SessionReference.ChangeSetModel CreateChangeSet(WorkstationBrowser.SessionReference.ChangeSetModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateChangeSet", ReplyAction="http://tempuri.org/ISession/CreateChangeSetResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel> CreateChangeSetAsync(WorkstationBrowser.SessionReference.ChangeSetModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteChangeSet", ReplyAction="http://tempuri.org/ISession/DeleteChangeSetResponse")]
        bool DeleteChangeSet(WorkstationBrowser.SessionReference.ChangeSetModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteChangeSet", ReplyAction="http://tempuri.org/ISession/DeleteChangeSetResponse")]
        System.Threading.Tasks.Task<bool> DeleteChangeSetAsync(WorkstationBrowser.SessionReference.ChangeSetModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetChangeSet", ReplyAction="http://tempuri.org/ISession/GetChangeSetResponse")]
        WorkstationBrowser.SessionReference.ChangeSetModel GetChangeSet(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetChangeSet", ReplyAction="http://tempuri.org/ISession/GetChangeSetResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel> GetChangeSetAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetChangeSetsPerFile", ReplyAction="http://tempuri.org/ISession/GetChangeSetsPerFileResponse")]
        WorkstationBrowser.SessionReference.ChangeSetModel[] GetChangeSetsPerFile(string trackerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetChangeSetsPerFile", ReplyAction="http://tempuri.org/ISession/GetChangeSetsPerFileResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel[]> GetChangeSetsPerFileAsync(string trackerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetChangeSetsPerProject", ReplyAction="http://tempuri.org/ISession/GetChangeSetsPerProjectResponse")]
        WorkstationBrowser.SessionReference.ChangeSetModel[] GetChangeSetsPerProject(long projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetChangeSetsPerProject", ReplyAction="http://tempuri.org/ISession/GetChangeSetsPerProjectResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel[]> GetChangeSetsPerProjectAsync(long projectId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/NotificationPull")]
        void NotificationPull(WorkstationBrowser.SessionReference.NotificationModel[] notifications, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/MessagePull")]
        void MessagePull(WorkstationBrowser.SessionReference.MessageModel[] notifications, string caller);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionChannel : WorkstationBrowser.SessionReference.ISession, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionClient : System.ServiceModel.DuplexClientBase<WorkstationBrowser.SessionReference.ISession>, WorkstationBrowser.SessionReference.ISession {
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WorkstationBrowser.SessionReference.UsersModel LogIn(string Username, string Token) {
            return base.Channel.LogIn(Username, Token);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> LogInAsync(string Username, string Token) {
            return base.Channel.LogInAsync(Username, Token);
        }
        
        public void LogOut(WorkstationBrowser.SessionReference.UsersModel user) {
            base.Channel.LogOut(user);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(WorkstationBrowser.SessionReference.UsersModel user) {
            return base.Channel.LogOutAsync(user);
        }
        
        public WorkstationBrowser.SessionReference.ProjectModel[] GetAllProjects() {
            return base.Channel.GetAllProjects();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel[]> GetAllProjectsAsync() {
            return base.Channel.GetAllProjectsAsync();
        }
        
        public WorkstationBrowser.SessionReference.ProjectModel GetProject(long id) {
            return base.Channel.GetProject(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel> GetProjectAsync(long id) {
            return base.Channel.GetProjectAsync(id);
        }
        
        public bool EditProject(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.EditProject(newInfo);
        }
        
        public System.Threading.Tasks.Task<bool> EditProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.EditProjectAsync(newInfo);
        }
        
        public bool DeleteProject(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.DeleteProject(newInfo);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.DeleteProjectAsync(newInfo);
        }
        
        public WorkstationBrowser.SessionReference.ProjectModel CreateProject(WorkstationBrowser.SessionReference.ProjectModel model) {
            return base.Channel.CreateProject(model);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel> CreateProjectAsync(WorkstationBrowser.SessionReference.ProjectModel model) {
            return base.Channel.CreateProjectAsync(model);
        }
        
        public WorkstationBrowser.SessionReference.UsersModel[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public bool EditUser(WorkstationBrowser.SessionReference.UsersModel newInfo) {
            return base.Channel.EditUser(newInfo);
        }
        
        public System.Threading.Tasks.Task<bool> EditUserAsync(WorkstationBrowser.SessionReference.UsersModel newInfo) {
            return base.Channel.EditUserAsync(newInfo);
        }
        
        public bool DeleteUser(WorkstationBrowser.SessionReference.UsersModel user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(WorkstationBrowser.SessionReference.UsersModel user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public WorkstationBrowser.SessionReference.UsersModel GetUserId(int id) {
            return base.Channel.GetUserId(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> GetUserIdAsync(int id) {
            return base.Channel.GetUserIdAsync(id);
        }
        
        public WorkstationBrowser.SessionReference.DepartmentModel[] GetAllDepartments() {
            return base.Channel.GetAllDepartments();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.DepartmentModel[]> GetAllDepartmentsAsync() {
            return base.Channel.GetAllDepartmentsAsync();
        }
        
        public WorkstationBrowser.SessionReference.TeamModel[] GetAllTeams() {
            return base.Channel.GetAllTeams();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel[]> GetAllTeamsAsync() {
            return base.Channel.GetAllTeamsAsync();
        }
        
        public WorkstationBrowser.SessionReference.TeamModel GetTeamPerUser(int userid) {
            return base.Channel.GetTeamPerUser(userid);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerUserAsync(int userid) {
            return base.Channel.GetTeamPerUserAsync(userid);
        }
        
        public WorkstationBrowser.SessionReference.TeamModel GetTeamPerId(int id) {
            return base.Channel.GetTeamPerId(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerIdAsync(int id) {
            return base.Channel.GetTeamPerIdAsync(id);
        }
        
        public WorkstationBrowser.SessionReference.TeamModel CreateTeam(WorkstationBrowser.SessionReference.TeamModel model) {
            return base.Channel.CreateTeam(model);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> CreateTeamAsync(WorkstationBrowser.SessionReference.TeamModel model) {
            return base.Channel.CreateTeamAsync(model);
        }
        
        public WorkstationBrowser.SessionReference.RankModel[] GetAllRanks() {
            return base.Channel.GetAllRanks();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel[]> GetAllRanksAsync() {
            return base.Channel.GetAllRanksAsync();
        }
        
        public WorkstationBrowser.SessionReference.RankModel GetRankByName(string name) {
            return base.Channel.GetRankByName(name);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel> GetRankByNameAsync(string name) {
            return base.Channel.GetRankByNameAsync(name);
        }
        
        public bool AcknowledgeNotification(WorkstationBrowser.SessionReference.NotificationModel original, int userid) {
            return base.Channel.AcknowledgeNotification(original, userid);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowledgeNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel original, int userid) {
            return base.Channel.AcknowledgeNotificationAsync(original, userid);
        }
        
        public WorkstationBrowser.SessionReference.NotificationModel[] GetAllNotifications(int userid) {
            return base.Channel.GetAllNotifications(userid);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.NotificationModel[]> GetAllNotificationsAsync(int userid) {
            return base.Channel.GetAllNotificationsAsync(userid);
        }
        
        public void CreateNotification(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all) {
            base.Channel.CreateNotification(notification, users, all);
        }
        
        public System.Threading.Tasks.Task CreateNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all) {
            return base.Channel.CreateNotificationAsync(notification, users, all);
        }
        
        public void UpdateNotifications(int userid, string caller) {
            base.Channel.UpdateNotifications(userid, caller);
        }
        
        public System.Threading.Tasks.Task UpdateNotificationsAsync(int userid, string caller) {
            return base.Channel.UpdateNotificationsAsync(userid, caller);
        }
        
        public void UpdateDirectMessages(int userid, int targetid, string caller) {
            base.Channel.UpdateDirectMessages(userid, targetid, caller);
        }
        
        public System.Threading.Tasks.Task UpdateDirectMessagesAsync(int userid, int targetid, string caller) {
            return base.Channel.UpdateDirectMessagesAsync(userid, targetid, caller);
        }
        
        public void DeleteNotification(long notificationid, int userid) {
            base.Channel.DeleteNotification(notificationid, userid);
        }
        
        public System.Threading.Tasks.Task DeleteNotificationAsync(long notificationid, int userid) {
            return base.Channel.DeleteNotificationAsync(notificationid, userid);
        }
        
        public WorkstationBrowser.SessionReference.TaskModel[] GetAllTasks(System.Nullable<long> project_id, System.Nullable<int> user_id) {
            return base.Channel.GetAllTasks(project_id, user_id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel[]> GetAllTasksAsync(System.Nullable<long> project_id, System.Nullable<int> user_id) {
            return base.Channel.GetAllTasksAsync(project_id, user_id);
        }
        
        public WorkstationBrowser.SessionReference.TaskModel GetTaskId(long id) {
            return base.Channel.GetTaskId(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel> GetTaskIdAsync(long id) {
            return base.Channel.GetTaskIdAsync(id);
        }
        
        public WorkstationBrowser.SessionReference.TaskModel CreateTask(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.CreateTask(newTask);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel> CreateTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.CreateTaskAsync(newTask);
        }
        
        public bool DeleteTask(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.DeleteTask(newTask);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.DeleteTaskAsync(newTask);
        }
        
        public bool EditTask(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.EditTask(newTask);
        }
        
        public System.Threading.Tasks.Task<bool> EditTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.EditTaskAsync(newTask);
        }
        
        public WorkstationBrowser.SessionReference.MessageModel[] GetAllMessages(WorkstationBrowser.SessionReference.UsersModel caller, bool sended, bool received, bool direct_only, bool indirect_only) {
            return base.Channel.GetAllMessages(caller, sended, received, direct_only, indirect_only);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.MessageModel[]> GetAllMessagesAsync(WorkstationBrowser.SessionReference.UsersModel caller, bool sended, bool received, bool direct_only, bool indirect_only) {
            return base.Channel.GetAllMessagesAsync(caller, sended, received, direct_only, indirect_only);
        }
        
        public bool SendMessage(WorkstationBrowser.SessionReference.MessageModel caller) {
            return base.Channel.SendMessage(caller);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(WorkstationBrowser.SessionReference.MessageModel caller) {
            return base.Channel.SendMessageAsync(caller);
        }
        
        public bool MarkAsRead(WorkstationBrowser.SessionReference.MessageModel caller) {
            return base.Channel.MarkAsRead(caller);
        }
        
        public System.Threading.Tasks.Task<bool> MarkAsReadAsync(WorkstationBrowser.SessionReference.MessageModel caller) {
            return base.Channel.MarkAsReadAsync(caller);
        }
        
        public bool DeleteMessage(WorkstationBrowser.SessionReference.MessageModel caller) {
            return base.Channel.DeleteMessage(caller);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMessageAsync(WorkstationBrowser.SessionReference.MessageModel caller) {
            return base.Channel.DeleteMessageAsync(caller);
        }
        
        public bool EditTeam(WorkstationBrowser.SessionReference.TeamModel newInfo) {
            return base.Channel.EditTeam(newInfo);
        }
        
        public System.Threading.Tasks.Task<bool> EditTeamAsync(WorkstationBrowser.SessionReference.TeamModel newInfo) {
            return base.Channel.EditTeamAsync(newInfo);
        }
        
        public bool DeleteTeam(WorkstationBrowser.SessionReference.TeamModel model) {
            return base.Channel.DeleteTeam(model);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTeamAsync(WorkstationBrowser.SessionReference.TeamModel model) {
            return base.Channel.DeleteTeamAsync(model);
        }
        
        public WorkstationBrowser.SessionReference.FileModel CreateFile(WorkstationBrowser.SessionReference.FileModel model) {
            return base.Channel.CreateFile(model);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.FileModel> CreateFileAsync(WorkstationBrowser.SessionReference.FileModel model) {
            return base.Channel.CreateFileAsync(model);
        }
        
        public bool UpdateFile(WorkstationBrowser.SessionReference.FileModel model) {
            return base.Channel.UpdateFile(model);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFileAsync(WorkstationBrowser.SessionReference.FileModel model) {
            return base.Channel.UpdateFileAsync(model);
        }
        
        public bool DeleteFile(string trackerId) {
            return base.Channel.DeleteFile(trackerId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string trackerId) {
            return base.Channel.DeleteFileAsync(trackerId);
        }
        
        public WorkstationBrowser.SessionReference.FileModel GetFile(string trackerId) {
            return base.Channel.GetFile(trackerId);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.FileModel> GetFileAsync(string trackerId) {
            return base.Channel.GetFileAsync(trackerId);
        }
        
        public WorkstationBrowser.SessionReference.FileModel[] GetFiles(long projectId) {
            return base.Channel.GetFiles(projectId);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.FileModel[]> GetFilesAsync(long projectId) {
            return base.Channel.GetFilesAsync(projectId);
        }
        
        public WorkstationBrowser.SessionReference.ChangeSetModel CreateChangeSet(WorkstationBrowser.SessionReference.ChangeSetModel model) {
            return base.Channel.CreateChangeSet(model);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel> CreateChangeSetAsync(WorkstationBrowser.SessionReference.ChangeSetModel model) {
            return base.Channel.CreateChangeSetAsync(model);
        }
        
        public bool DeleteChangeSet(WorkstationBrowser.SessionReference.ChangeSetModel model) {
            return base.Channel.DeleteChangeSet(model);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteChangeSetAsync(WorkstationBrowser.SessionReference.ChangeSetModel model) {
            return base.Channel.DeleteChangeSetAsync(model);
        }
        
        public WorkstationBrowser.SessionReference.ChangeSetModel GetChangeSet(System.Guid id) {
            return base.Channel.GetChangeSet(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel> GetChangeSetAsync(System.Guid id) {
            return base.Channel.GetChangeSetAsync(id);
        }
        
        public WorkstationBrowser.SessionReference.ChangeSetModel[] GetChangeSetsPerFile(string trackerId) {
            return base.Channel.GetChangeSetsPerFile(trackerId);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel[]> GetChangeSetsPerFileAsync(string trackerId) {
            return base.Channel.GetChangeSetsPerFileAsync(trackerId);
        }
        
        public WorkstationBrowser.SessionReference.ChangeSetModel[] GetChangeSetsPerProject(long projectId) {
            return base.Channel.GetChangeSetsPerProject(projectId);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ChangeSetModel[]> GetChangeSetsPerProjectAsync(long projectId) {
            return base.Channel.GetChangeSetsPerProjectAsync(projectId);
        }
    }
}
