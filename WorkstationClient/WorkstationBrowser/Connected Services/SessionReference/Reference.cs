//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkstationBrowser.SessionReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsersModel", Namespace="http://schemas.datacontract.org/2004/07/Workstation.Model")]
    [System.SerializableAttribute()]
    public partial class UsersModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string emailField;
        
        private int idField;
        
        private string rankField;
        
        private string rightsField;
        
        private System.Nullable<int> team_idField;
        
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string rank {
            get {
                return this.rankField;
            }
            set {
                if ((object.ReferenceEquals(this.rankField, value) != true)) {
                    this.rankField = value;
                    this.RaisePropertyChanged("rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string rights {
            get {
                return this.rightsField;
            }
            set {
                if ((object.ReferenceEquals(this.rightsField, value) != true)) {
                    this.rightsField = value;
                    this.RaisePropertyChanged("rights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> team_id {
            get {
                return this.team_idField;
            }
            set {
                if ((this.team_idField.Equals(value) != true)) {
                    this.team_idField = value;
                    this.RaisePropertyChanged("team_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputValidationFaultContract", Namespace="http://schemas.datacontract.org/2004/07/WorkstationServices.Security")]
    [System.SerializableAttribute()]
    public partial class InputValidationFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectModel", Namespace="http://schemas.datacontract.org/2004/07/Workstation.Model")]
    [System.SerializableAttribute()]
    public partial class ProjectModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long idField;
        
        private string nameField;
        
        private string rootField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string root {
            get {
                return this.rootField;
            }
            set {
                if ((object.ReferenceEquals(this.rootField, value) != true)) {
                    this.rootField = value;
                    this.RaisePropertyChanged("root");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepartmentModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class DepartmentModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int idField;
        
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class TeamModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<int> department_idField;
        
        private int idField;
        
        private string nameField;
        
        private System.Nullable<long> project_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> department_id {
            get {
                return this.department_idField;
            }
            set {
                if ((this.department_idField.Equals(value) != true)) {
                    this.department_idField = value;
                    this.RaisePropertyChanged("department_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<long> project_id {
            get {
                return this.project_idField;
            }
            set {
                if ((this.project_idField.Equals(value) != true)) {
                    this.project_idField = value;
                    this.RaisePropertyChanged("project_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RankModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class RankModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string nameField;
        
        private string rightsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string rights {
            get {
                return this.rightsField;
            }
            set {
                if ((object.ReferenceEquals(this.rightsField, value) != true)) {
                    this.rightsField = value;
                    this.RaisePropertyChanged("rights");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class NotificationModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string contentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long idField;
        
        private bool readField;
        
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool read {
            get {
                return this.readField;
            }
            set {
                if ((this.readField.Equals(value) != true)) {
                    this.readField = value;
                    this.RaisePropertyChanged("read");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskModel", Namespace="http://schemas.datacontract.org/2004/07/WorkstationMessaging.Model")]
    [System.SerializableAttribute()]
    public partial class TaskModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime beginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> endField;
        
        private long idField;
        
        private long project_idField;
        
        private string titleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> user_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime begin {
            get {
                return this.beginField;
            }
            set {
                if ((this.beginField.Equals(value) != true)) {
                    this.beginField = value;
                    this.RaisePropertyChanged("begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> end {
            get {
                return this.endField;
            }
            set {
                if ((this.endField.Equals(value) != true)) {
                    this.endField = value;
                    this.RaisePropertyChanged("end");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long project_id {
            get {
                return this.project_idField;
            }
            set {
                if ((this.project_idField.Equals(value) != true)) {
                    this.project_idField = value;
                    this.RaisePropertyChanged("project_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> user_id {
            get {
                return this.user_idField;
            }
            set {
                if ((this.user_idField.Equals(value) != true)) {
                    this.user_idField = value;
                    this.RaisePropertyChanged("user_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SessionReference.ISession", CallbackContract=typeof(WorkstationBrowser.SessionReference.ISessionCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISession {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/LogIn", ReplyAction="http://tempuri.org/ISession/LogInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WorkstationBrowser.SessionReference.InputValidationFaultContract), Action="http://tempuri.org/ISession/LogInInputValidationFaultContractFault", Name="InputValidationFaultContract", Namespace="http://schemas.datacontract.org/2004/07/WorkstationServices.Security")]
        WorkstationBrowser.SessionReference.UsersModel LogIn(string Username, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/LogIn", ReplyAction="http://tempuri.org/ISession/LogInResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> LogInAsync(string Username, string Token);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ISession/LogOut")]
        void LogOut(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ISession/LogOut")]
        System.Threading.Tasks.Task LogOutAsync(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllProjects", ReplyAction="http://tempuri.org/ISession/GetAllProjectsResponse")]
        WorkstationBrowser.SessionReference.ProjectModel[] GetAllProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllProjects", ReplyAction="http://tempuri.org/ISession/GetAllProjectsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel[]> GetAllProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetProject", ReplyAction="http://tempuri.org/ISession/GetProjectResponse")]
        WorkstationBrowser.SessionReference.ProjectModel GetProject(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetProject", ReplyAction="http://tempuri.org/ISession/GetProjectResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel> GetProjectAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditProject", ReplyAction="http://tempuri.org/ISession/EditProjectResponse")]
        bool EditProject(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditProject", ReplyAction="http://tempuri.org/ISession/EditProjectResponse")]
        System.Threading.Tasks.Task<bool> EditProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteProject", ReplyAction="http://tempuri.org/ISession/DeleteProjectResponse")]
        bool DeleteProject(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteProject", ReplyAction="http://tempuri.org/ISession/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllUsers", ReplyAction="http://tempuri.org/ISession/GetAllUsersResponse")]
        WorkstationBrowser.SessionReference.UsersModel[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllUsers", ReplyAction="http://tempuri.org/ISession/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditUser", ReplyAction="http://tempuri.org/ISession/EditUserResponse")]
        bool EditUser(WorkstationBrowser.SessionReference.UsersModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditUser", ReplyAction="http://tempuri.org/ISession/EditUserResponse")]
        System.Threading.Tasks.Task<bool> EditUserAsync(WorkstationBrowser.SessionReference.UsersModel newInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteUser", ReplyAction="http://tempuri.org/ISession/DeleteUserResponse")]
        bool DeleteUser(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteUser", ReplyAction="http://tempuri.org/ISession/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(WorkstationBrowser.SessionReference.UsersModel user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetUserId", ReplyAction="http://tempuri.org/ISession/GetUserIdResponse")]
        WorkstationBrowser.SessionReference.UsersModel GetUserId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetUserId", ReplyAction="http://tempuri.org/ISession/GetUserIdResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> GetUserIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllDepartments", ReplyAction="http://tempuri.org/ISession/GetAllDepartmentsResponse")]
        WorkstationBrowser.SessionReference.DepartmentModel[] GetAllDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllDepartments", ReplyAction="http://tempuri.org/ISession/GetAllDepartmentsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.DepartmentModel[]> GetAllDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTeams", ReplyAction="http://tempuri.org/ISession/GetAllTeamsResponse")]
        WorkstationBrowser.SessionReference.TeamModel[] GetAllTeams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTeams", ReplyAction="http://tempuri.org/ISession/GetAllTeamsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel[]> GetAllTeamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerUser", ReplyAction="http://tempuri.org/ISession/GetTeamPerUserResponse")]
        WorkstationBrowser.SessionReference.TeamModel GetTeamPerUser(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerUser", ReplyAction="http://tempuri.org/ISession/GetTeamPerUserResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerUserAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerId", ReplyAction="http://tempuri.org/ISession/GetTeamPerIdResponse")]
        WorkstationBrowser.SessionReference.TeamModel GetTeamPerId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetTeamPerId", ReplyAction="http://tempuri.org/ISession/GetTeamPerIdResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllRanks", ReplyAction="http://tempuri.org/ISession/GetAllRanksResponse")]
        WorkstationBrowser.SessionReference.RankModel[] GetAllRanks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllRanks", ReplyAction="http://tempuri.org/ISession/GetAllRanksResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel[]> GetAllRanksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetRankByName", ReplyAction="http://tempuri.org/ISession/GetRankByNameResponse")]
        WorkstationBrowser.SessionReference.RankModel GetRankByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetRankByName", ReplyAction="http://tempuri.org/ISession/GetRankByNameResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel> GetRankByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/AcknowledgeNotification", ReplyAction="http://tempuri.org/ISession/AcknowledgeNotificationResponse")]
        bool AcknowledgeNotification(WorkstationBrowser.SessionReference.NotificationModel original, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/AcknowledgeNotification", ReplyAction="http://tempuri.org/ISession/AcknowledgeNotificationResponse")]
        System.Threading.Tasks.Task<bool> AcknowledgeNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel original, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllNotifications", ReplyAction="http://tempuri.org/ISession/GetAllNotificationsResponse")]
        WorkstationBrowser.SessionReference.NotificationModel[] GetAllNotifications(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllNotifications", ReplyAction="http://tempuri.org/ISession/GetAllNotificationsResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.NotificationModel[]> GetAllNotificationsAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/CreateNotification")]
        void CreateNotification(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/CreateNotification")]
        System.Threading.Tasks.Task CreateNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/UpdateNotifications")]
        void UpdateNotifications(int userid, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/UpdateNotifications")]
        System.Threading.Tasks.Task UpdateNotificationsAsync(int userid, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/DeleteNotification")]
        void DeleteNotification(long notificationid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/DeleteNotification")]
        System.Threading.Tasks.Task DeleteNotificationAsync(long notificationid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTasks", ReplyAction="http://tempuri.org/ISession/GetAllTasksResponse")]
        WorkstationBrowser.SessionReference.TaskModel[] GetAllTasks(System.Nullable<long> project_id, System.Nullable<int> user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/GetAllTasks", ReplyAction="http://tempuri.org/ISession/GetAllTasksResponse")]
        System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel[]> GetAllTasksAsync(System.Nullable<long> project_id, System.Nullable<int> user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateTask", ReplyAction="http://tempuri.org/ISession/CreateTaskResponse")]
        void CreateTask(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/CreateTask", ReplyAction="http://tempuri.org/ISession/CreateTaskResponse")]
        System.Threading.Tasks.Task CreateTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteTask", ReplyAction="http://tempuri.org/ISession/DeleteTaskResponse")]
        bool DeleteTask(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/DeleteTask", ReplyAction="http://tempuri.org/ISession/DeleteTaskResponse")]
        System.Threading.Tasks.Task<bool> DeleteTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditTask", ReplyAction="http://tempuri.org/ISession/EditTaskResponse")]
        bool EditTask(WorkstationBrowser.SessionReference.TaskModel newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISession/EditTask", ReplyAction="http://tempuri.org/ISession/EditTaskResponse")]
        System.Threading.Tasks.Task<bool> EditTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISession/NotificationPull")]
        void NotificationPull(WorkstationBrowser.SessionReference.NotificationModel[] notifications, string caller);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionChannel : WorkstationBrowser.SessionReference.ISession, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionClient : System.ServiceModel.DuplexClientBase<WorkstationBrowser.SessionReference.ISession>, WorkstationBrowser.SessionReference.ISession {
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SessionClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WorkstationBrowser.SessionReference.UsersModel LogIn(string Username, string Token) {
            return base.Channel.LogIn(Username, Token);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> LogInAsync(string Username, string Token) {
            return base.Channel.LogInAsync(Username, Token);
        }
        
        public void LogOut(WorkstationBrowser.SessionReference.UsersModel user) {
            base.Channel.LogOut(user);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(WorkstationBrowser.SessionReference.UsersModel user) {
            return base.Channel.LogOutAsync(user);
        }
        
        public WorkstationBrowser.SessionReference.ProjectModel[] GetAllProjects() {
            return base.Channel.GetAllProjects();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel[]> GetAllProjectsAsync() {
            return base.Channel.GetAllProjectsAsync();
        }
        
        public WorkstationBrowser.SessionReference.ProjectModel GetProject(long id) {
            return base.Channel.GetProject(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.ProjectModel> GetProjectAsync(long id) {
            return base.Channel.GetProjectAsync(id);
        }
        
        public bool EditProject(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.EditProject(newInfo);
        }
        
        public System.Threading.Tasks.Task<bool> EditProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.EditProjectAsync(newInfo);
        }
        
        public bool DeleteProject(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.DeleteProject(newInfo);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(WorkstationBrowser.SessionReference.ProjectModel newInfo) {
            return base.Channel.DeleteProjectAsync(newInfo);
        }
        
        public WorkstationBrowser.SessionReference.UsersModel[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public bool EditUser(WorkstationBrowser.SessionReference.UsersModel newInfo) {
            return base.Channel.EditUser(newInfo);
        }
        
        public System.Threading.Tasks.Task<bool> EditUserAsync(WorkstationBrowser.SessionReference.UsersModel newInfo) {
            return base.Channel.EditUserAsync(newInfo);
        }
        
        public bool DeleteUser(WorkstationBrowser.SessionReference.UsersModel user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(WorkstationBrowser.SessionReference.UsersModel user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public WorkstationBrowser.SessionReference.UsersModel GetUserId(int id) {
            return base.Channel.GetUserId(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.UsersModel> GetUserIdAsync(int id) {
            return base.Channel.GetUserIdAsync(id);
        }
        
        public WorkstationBrowser.SessionReference.DepartmentModel[] GetAllDepartments() {
            return base.Channel.GetAllDepartments();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.DepartmentModel[]> GetAllDepartmentsAsync() {
            return base.Channel.GetAllDepartmentsAsync();
        }
        
        public WorkstationBrowser.SessionReference.TeamModel[] GetAllTeams() {
            return base.Channel.GetAllTeams();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel[]> GetAllTeamsAsync() {
            return base.Channel.GetAllTeamsAsync();
        }
        
        public WorkstationBrowser.SessionReference.TeamModel GetTeamPerUser(int userid) {
            return base.Channel.GetTeamPerUser(userid);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerUserAsync(int userid) {
            return base.Channel.GetTeamPerUserAsync(userid);
        }
        
        public WorkstationBrowser.SessionReference.TeamModel GetTeamPerId(int id) {
            return base.Channel.GetTeamPerId(id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TeamModel> GetTeamPerIdAsync(int id) {
            return base.Channel.GetTeamPerIdAsync(id);
        }
        
        public WorkstationBrowser.SessionReference.RankModel[] GetAllRanks() {
            return base.Channel.GetAllRanks();
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel[]> GetAllRanksAsync() {
            return base.Channel.GetAllRanksAsync();
        }
        
        public WorkstationBrowser.SessionReference.RankModel GetRankByName(string name) {
            return base.Channel.GetRankByName(name);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.RankModel> GetRankByNameAsync(string name) {
            return base.Channel.GetRankByNameAsync(name);
        }
        
        public bool AcknowledgeNotification(WorkstationBrowser.SessionReference.NotificationModel original, int userid) {
            return base.Channel.AcknowledgeNotification(original, userid);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowledgeNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel original, int userid) {
            return base.Channel.AcknowledgeNotificationAsync(original, userid);
        }
        
        public WorkstationBrowser.SessionReference.NotificationModel[] GetAllNotifications(int userid) {
            return base.Channel.GetAllNotifications(userid);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.NotificationModel[]> GetAllNotificationsAsync(int userid) {
            return base.Channel.GetAllNotificationsAsync(userid);
        }
        
        public void CreateNotification(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all) {
            base.Channel.CreateNotification(notification, users, all);
        }
        
        public System.Threading.Tasks.Task CreateNotificationAsync(WorkstationBrowser.SessionReference.NotificationModel notification, int[] users, bool all) {
            return base.Channel.CreateNotificationAsync(notification, users, all);
        }
        
        public void UpdateNotifications(int userid, string caller) {
            base.Channel.UpdateNotifications(userid, caller);
        }
        
        public System.Threading.Tasks.Task UpdateNotificationsAsync(int userid, string caller) {
            return base.Channel.UpdateNotificationsAsync(userid, caller);
        }
        
        public void DeleteNotification(long notificationid, int userid) {
            base.Channel.DeleteNotification(notificationid, userid);
        }
        
        public System.Threading.Tasks.Task DeleteNotificationAsync(long notificationid, int userid) {
            return base.Channel.DeleteNotificationAsync(notificationid, userid);
        }
        
        public WorkstationBrowser.SessionReference.TaskModel[] GetAllTasks(System.Nullable<long> project_id, System.Nullable<int> user_id) {
            return base.Channel.GetAllTasks(project_id, user_id);
        }
        
        public System.Threading.Tasks.Task<WorkstationBrowser.SessionReference.TaskModel[]> GetAllTasksAsync(System.Nullable<long> project_id, System.Nullable<int> user_id) {
            return base.Channel.GetAllTasksAsync(project_id, user_id);
        }
        
        public void CreateTask(WorkstationBrowser.SessionReference.TaskModel newTask) {
            base.Channel.CreateTask(newTask);
        }
        
        public System.Threading.Tasks.Task CreateTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.CreateTaskAsync(newTask);
        }
        
        public bool DeleteTask(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.DeleteTask(newTask);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.DeleteTaskAsync(newTask);
        }
        
        public bool EditTask(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.EditTask(newTask);
        }
        
        public System.Threading.Tasks.Task<bool> EditTaskAsync(WorkstationBrowser.SessionReference.TaskModel newTask) {
            return base.Channel.EditTaskAsync(newTask);
        }
    }
}
